/* This file is part of the Multiagent Decision Process (MADP) Toolbox v0.3. 
 *
 * The majority of MADP is free software released under GNUP GPL v.3. However,
 * some of the included libraries are released under a different license. For 
 * more information, see the included COPYING file. For other information, 
 * please refer to the included README file.
 *
 * This file has been written and/or modified by the following people:
 *
 * Frans Oliehoek 
 * Matthijs Spaan 
 *
 * For contact information please see the included AUTHORS file.
 */

/* Only include this header file once. */
#ifndef _PARTIALPOLICYPOOLITEMINTERFACE_H_
#define _PARTIALPOLICYPOOLITEMINTERFACE_H_ 1

/* the include directives */
#include <iostream>
#include "Globals.h"
#include "boost/shared_ptr.hpp"

class PartialPolicyPoolItemInterface;
typedef boost::shared_ptr<PartialPolicyPoolItemInterface> PartialPolicyPoolItemInterface_sharedPtr;

#include "BayesianGameIdenticalPayoffSolver_T.h"  //< templated, needs to be included
class BayesianGameIdenticalPayoffSolver;
class PartialJointPolicyDiscretePure;
class BGCG_Solver;

/**\brief PartialPolicyPoolItemInterface is a class that gives the
 * interface for a PolicyPoolItem. A PolicyPoolItem is a wrapper for a
 * partial joint policy (together with some properties) when placed in
 * a PolicyPool.
 *
 **/
class PartialPolicyPoolItemInterface 
{
    private:    
    
    protected:
    
    public:
        // Constructor, destructor and copy assignment.
        /// (default) Constructor
        //PartialPolicyPoolItemInterface();
        /// Copy constructor.
        //PartialPolicyPoolItemInterface(const PartialPolicyPoolItemInterface& a);
        /// Destructor.
        virtual ~PartialPolicyPoolItemInterface()
        {};
        /// Copy assignment operator
        //PartialPolicyPoolItemInterface& operator= (const PartialPolicyPoolItemInterface& o);

        //operators:

        //data manipulation (set) functions:
        
        //get (data) functions:
        //
        /**\brief Returns a pointer to the wrapped (partial) joint policy*/
        virtual boost::shared_ptr<PartialJointPolicyDiscretePure> 
        GetJPol() const = 0;
        /**\brief Returns the heuristic value.*/
        virtual double 
        GetValue() const=0;
        /**\brief Sets the heuristic value.*/
        virtual void 
        SetValue(double value) = 0;

        /**\brief Returns a pointer to the BGIPSolver instance
         * generated by this PartialJointPolicyDiscretePure.*/
        virtual boost::shared_ptr<BayesianGameIdenticalPayoffSolver>
        GetBGIPSolverPointer() const=0;
        /**\brief Returns a pointer to the BGIPSolver instance
         * generated by this PartialJointPolicyDiscretePure.*/
        virtual boost::shared_ptr<BGCG_Solver>
        GetBGCGSolverPointer() const=0;

        /** \brief Sets the pointer to the BGIPSolver instance
         * associated with this PartialJointPolicyDiscretePure. */
        virtual void 
        SetBGIPSolverPointer(
            const boost::shared_ptr<BayesianGameIdenticalPayoffSolver> &bgips) = 0;
        /** \brief Sets the pointer to the BGIPSolver instance
         * associated with this PartialJointPolicyDiscretePure. */
        virtual void 
        SetBGCGSolverPointer(
            const boost::shared_ptr<BGCG_Solver> &bgcgs) = 0;

//------------------------------------
//avoid use of the following functions
//(consider them deprecated)        
        /**\brief Returns a pointer to the BGIPSolver instance
         * generated by this PartialJointPolicyDiscretePure.*/
        virtual boost::shared_ptr<BayesianGameIdenticalPayoffSolver_T<JointPolicyPureVector> >
        GetBGIPSolver_T_PointerJPPV() const=0;
        /**\brief Returns a pointer to the BGIPSolver instance
         * generated by this PartialJointPolicyDiscretePure.*/
        virtual boost::shared_ptr<BayesianGameIdenticalPayoffSolver_T<JointPolicyPureVectorForClusteredBG> >
        GetBGIPSolver_T_PointerCluster() const=0;
        /** \brief Sets the pointer to the BGIPSolver instance
         * associated with this PartialJointPolicyDiscretePure. */
        virtual void 
        SetBGIPSolver_T_Pointer(
            const boost::shared_ptr<BayesianGameIdenticalPayoffSolver_T<JointPolicyPureVector> > &bgips) = 0;
        /** \brief Sets the pointer to the BGIPSolver instance
         * associated with this PartialJointPolicyDiscretePure. */
        virtual void 
        SetBGIPSolver_T_Pointer(
            const boost::shared_ptr<BayesianGameIdenticalPayoffSolver_T<JointPolicyPureVectorForClusteredBG> > &bgips) = 0;
//------------------------------------

        /// Returns a pointer to a copy of this class.
        virtual PartialPolicyPoolItemInterface* Clone() const = 0;
        /// Deletes the BGIPSolver instance associated with this PPI.
        virtual void CleanUpBGIPSolver() = 0;

        /**Softprint the PartialPolicyPoolItemInterface*/
        virtual std::string SoftPrint() const = 0;
        /**Softprint the PartialPolicyPoolItemInterface in brief*/
        virtual std::string SoftPrintBrief() const = 0;
        /**Prints a description to stdout.*/
        void Print() const 
        {std::cout << SoftPrint();}
        /**Prints a brief description to stdout.*/
        void PrintBrief() const 
        {std::cout << SoftPrint();}
};


#endif /* !_PARTIALPOLICYPOOLITEMINTERFACE_H_ */

// Local Variables: ***
// mode:c++ ***
// End: ***
